{"version":3,"sources":["../../../src/local/editor/conditions.js"],"names":["reloadSettingsConditionsRegion","reportElement","templateContext","pendingPromise","Pending","settingsConditionsRegion","querySelector","reportSelectors","regions","settingsConditions","Templates","renderForPromise","conditions","then","html","js","replaceNode","javascript","initConditionsForm","resolve","conditionFormContainer","conditionForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","event","preventDefault","addToast","catch","Notification","exception","reportEvents","tableReload","NOSUBMIT_BUTTON_PRESSED","dataset","reportId","data","init","initialized","reportAddCondition","target","closest","actions","value","options","selectedIndex","text","reportRemoveCondition","conditionContainer","activeCondition","conditionName","key","component","param","confirmTitle","confirmText","confirmButton","confirm","conditionId","activeConditionsSortableList","SortableList","activeConditions","isHorizontal","getElementName","element","Promise","on","EVENTS","DROP","info","positionChanged","conditionPosition","targetConditionPosition","targetNextElement","siblings","length"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder conditions editor\n *\n * @module      core_reportbuilder/local/editor/conditions\n * @copyright   2021 Paul Holden <paulh@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport $ from 'jquery';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport 'core/inplace_editable';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport SortableList from 'core/sortable_list';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport Templates from 'core/templates';\nimport {add as addToast} from 'core/toast';\nimport DynamicForm from 'core_form/dynamicform';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {addCondition, deleteCondition, reorderCondition, resetConditions} from 'core_reportbuilder/local/repository/conditions';\n\n/**\n * Reload conditions settings region\n *\n * @param {Element} reportElement\n * @param {Object} templateContext\n * @return {Promise}\n */\nconst reloadSettingsConditionsRegion = (reportElement, templateContext) => {\n    const pendingPromise = new Pending('core_reportbuilder/conditions:reload');\n    const settingsConditionsRegion = reportElement.querySelector(reportSelectors.regions.settingsConditions);\n\n    return Templates.renderForPromise('core_reportbuilder/local/settings/conditions', {conditions: templateContext})\n        .then(({html, js}) => {\n            Templates.replaceNode(settingsConditionsRegion, html, js + templateContext.javascript);\n            initConditionsForm(reportElement);\n            return pendingPromise.resolve();\n        });\n};\n\n/**\n * Initialise conditions form, must be called on each init because the form container is re-created when switching editor modes\n *\n * @param {Element} reportElement\n */\nconst initConditionsForm = reportElement => {\n    // Handle dynamic conditions form.\n    const conditionFormContainer = reportElement.querySelector(reportSelectors.regions.settingsConditions);\n    if (!conditionFormContainer) {\n        return;\n    }\n    const conditionForm = new DynamicForm(conditionFormContainer, '\\\\core_reportbuilder\\\\form\\\\condition');\n\n    // Submit report conditions.\n    conditionForm.addEventListener(conditionForm.events.FORM_SUBMITTED, event => {\n        event.preventDefault();\n\n        getString('conditionsapplied', 'core_reportbuilder')\n            .then(addToast)\n            .catch(Notification.exception);\n\n        // After the form has been submitted, we should trigger report table reload.\n        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n    });\n\n    // Reset report conditions.\n    conditionForm.addEventListener(conditionForm.events.NOSUBMIT_BUTTON_PRESSED, event => {\n        event.preventDefault();\n\n        const pendingPromise = new Pending('core_reportbuilder/conditions:reset');\n\n        resetConditions(reportElement.dataset.reportId)\n            .then(data => reloadSettingsConditionsRegion(reportElement, data))\n            .then(() => getString('conditionsreset', 'core_reportbuilder'))\n            .then(addToast)\n            .then(() => {\n                dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                return pendingPromise.resolve();\n            })\n            .catch(Notification.exception);\n    });\n};\n\n/**\n * Initialise module\n *\n * @param {Element} reportElement\n * @param {Boolean} initialized Ensure we only add our listeners once\n */\nexport const init = (reportElement, initialized) => {\n    initConditionsForm(reportElement);\n    if (initialized) {\n        return;\n    }\n\n    reportElement.addEventListener('click', event => {\n\n        // Add condition to report.\n        const reportAddCondition = event.target.closest(reportSelectors.actions.reportAddCondition);\n        if (reportAddCondition) {\n            event.preventDefault();\n\n            // Check if dropdown is closed with no condition selected.\n            if (reportAddCondition.value === '0') {\n                return;\n            }\n\n            const pendingPromise = new Pending('core_reportbuilder/conditions:add');\n\n            addCondition(reportElement.dataset.reportId, reportAddCondition.value)\n                .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                .then(() => getString('conditionadded', 'core_reportbuilder',\n                    reportAddCondition.options[reportAddCondition.selectedIndex].text))\n                .then(addToast)\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n\n        // Remove condition from report.\n        const reportRemoveCondition = event.target.closest(reportSelectors.actions.reportRemoveCondition);\n        if (reportRemoveCondition) {\n            event.preventDefault();\n\n            const conditionContainer = reportRemoveCondition.closest(reportSelectors.regions.activeCondition);\n            const conditionName = conditionContainer.dataset.conditionName;\n\n            getStrings([\n                {key: 'deletecondition', component: 'core_reportbuilder', param: conditionName},\n                {key: 'deleteconditionconfirm', component: 'core_reportbuilder', param: conditionName},\n                {key: 'delete', component: 'moodle'},\n            ]).then(([confirmTitle, confirmText, confirmButton]) => {\n                Notification.confirm(confirmTitle, confirmText, confirmButton, null, () => {\n                    const pendingPromise = new Pending('core_reportbuilder/conditions:remove');\n\n                    deleteCondition(reportElement.dataset.reportId, conditionContainer.dataset.conditionId)\n                        .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                        .then(() => getString('conditiondeleted', 'core_reportbuilder', conditionName))\n                        .then(addToast)\n                        .then(() => {\n                            dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                            return pendingPromise.resolve();\n                        })\n                        .catch(Notification.exception);\n                });\n                return;\n            }).catch(Notification.exception);\n        }\n    });\n\n    // Initialize sortable list to handle active conditions moving (note JQuery dependency, see MDL-72293 for resolution).\n    var activeConditionsSortableList = new SortableList(`${reportSelectors.regions.activeConditions}`,\n        {isHorizontal: false});\n    activeConditionsSortableList.getElementName = element => Promise.resolve(element.data('conditionName'));\n\n    $(reportElement).on(SortableList.EVENTS.DROP, reportSelectors.regions.activeCondition, (event, info) => {\n        if (info.positionChanged) {\n            const pendingPromise = new Pending('core_reportbuilder/conditions:reorder');\n            const conditionId = info.element.data('conditionId');\n            const conditionPosition = info.element.data('conditionPosition');\n\n            // Select target position, if moving to the end then count number of element siblings.\n            let targetConditionPosition = info.targetNextElement.data('conditionPosition') || info.element.siblings().length + 2;\n            if (targetConditionPosition > conditionPosition) {\n                targetConditionPosition--;\n            }\n\n            reorderCondition(reportElement.dataset.reportId, conditionId, targetConditionPosition)\n                .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                .then(() => getString('conditionmoved', 'core_reportbuilder', info.element.data('conditionName')))\n                .then(addToast)\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n    });\n};\n"],"file":"conditions.min.js"}